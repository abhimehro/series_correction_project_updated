# .github/workflows/python-tests.yml
# Basic GitHub Actions workflow for running Python tests using pytest.

name: Python Tests

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ main ]
  # Triggers the workflow on pull request events but only for the main branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    # Define a matrix strategy to run tests on multiple Python versions
    strategy:
      fail-fast: false # Don't cancel all jobs if one fails
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"] # Test against multiple Python versions

    steps:
      # Step 1: Check out the repository code
      - name: Check out repository code
        uses: actions/checkout@v4 # Use the latest checkout action

      # Step 2: Set up Python environment for the current matrix version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5 # Use the latest setup-python action
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # Cache pip dependencies

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov # Install testing libraries
          # Check if requirements.txt exists in the scripts directory and install if present
          # Adjust the path if your requirements file is elsewhere (e.g., project root)
          REQUIREMENTS_FILE="scripts/requirements.txt"
          if [ -f $REQUIREMENTS_FILE ]; then
            pip install -r $REQUIREMENTS_FILE
            echo "Installed dependencies from $REQUIREMENTS_FILE"
          else
            echo "Warning: $REQUIREMENTS_FILE not found. Skipping project dependency installation."
            # Consider failing the job if requirements are essential:
            # exit 1
          fi
          # Install package itself if setup.py exists, allowing tests to import it
          if [ -f setup.py ]; then
            pip install .
            echo "Installed project package using setup.py"
          fi

      # Step 4: Run tests with pytest and generate coverage report
      # Assumes tests are in a 'tests/' directory at the root, or adjust path.
      # Assumes source code is primarily in a 'scripts/' directory, adjust coverage target if needed.
      - name: Test with pytest
        run: |
          pytest --cov=scripts tests/ --cov-report=xml # Generate XML coverage report

      # Step 5: Upload coverage report to Codecov (Optional)
      # Requires setting up Codecov for your repository and potentially a CODECOV_TOKEN secret
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4 # Use the latest Codecov action
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Optional: Use token for private repos
          fail_ci_if_error: true # Optional: Fail workflow if upload error occurs
          verbose: true # Optional: Enable verbose logs
